<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="500" minHeight="350" creationComplete="init()">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			private var streamer:String;
			private var file:String;
			private var publishType:String;
			private var onStopRecord:String;
			private var camera:Camera;
			private var microphone:Microphone;
			private var connection:NetConnection;
			private var stream:NetStream;
			private var h264Settings:H264VideoStreamSettings;

			private function toggleFeedListener(event:MouseEvent):void {
				if(toggleFeed.label == 'Record') {
					toggleFeed.label = 'Stop';
					stream.publish(file, publishType);
					videoDisplay.attachCamera(camera);
				} else {
                    callWrapper();
					toggleFeed.label = 'Record';
					stream.close();
					videoDisplay.attachCamera(null);
				}
			}


            public function callWrapper():void {
                var s:String;
                if (ExternalInterface.available) {
                   var wrapperFunction:String = onStopRecord;
                   s = ExternalInterface.call(wrapperFunction,"ok");
                } else {
                   s = "Wrapper not available";
                }
            }


			private function initListeners():void {
				toggleFeed.addEventListener(MouseEvent.CLICK, toggleFeedListener);
			}

			private function netStatusHander(event:NetStatusEvent):void {
				switch(event.info.code) {
					case 'NetConnection.Connect.Success':
						stream = new NetStream(connection);
						stream.attachCamera(camera);
						stream.attachAudio(microphone);
						h264Settings = new H264VideoStreamSettings();
						h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_1_2);
						h264Settings.setKeyFrameInterval(1);
						stream.videoStreamSettings = h264Settings;
						stream.bufferTimeMax = 30;
						stream.bufferTime = 10;
						break;
				}
			}

			private function init():void {
				streamer = FlexGlobals.topLevelApplication.parameters.streamer;
				file = FlexGlobals.topLevelApplication.parameters.file;
				publishType = FlexGlobals.topLevelApplication.parameters.publishType;
                onStopRecord = FlexGlobals.topLevelApplication.parameters.onStopRecord;
				if(file == null) {
					Alert.show('Missing flashvars: file');
					return;
				}
				if(streamer == null) {
					Alert.show('Missing flashvars: streamer');
					return;
				}
				if(publishType == null) {
					publishType = 'record';
				}
				initListeners();

				camera = Camera.getCamera();
				camera.setMode(640, 480, 30);
				camera.setQuality(0, 90);

				microphone = Microphone.getMicrophone();
				microphone.encodeQuality = 9;
				microphone.rate = 44;
			//	microphone.framesPerPacket = 1;

				connection = new NetConnection();
				connection.connect(streamer);
				connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHander);

				videoDisplay.attachCamera(camera);
			}
		]]>
	</fx:Script>
	<s:Panel x="0" y="0" width="100%" height="100%" title="RTMP Publisher">
		<mx:VideoDisplay width="100%" height="100%" id="videoDisplay">
		</mx:VideoDisplay>
		<s:controlBarContent>
			<s:Button label="Record" id="toggleFeed"></s:Button>
		</s:controlBarContent>
	</s:Panel>
</s:Application>
